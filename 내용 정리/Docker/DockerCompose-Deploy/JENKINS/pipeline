//여기에 jenkins pipline script만들어줘     

pipeline {
    agent any
    
    environment {
        GITHUB_REPO = 'https://github.com/STD-INFO-COMPUTING-WEB-2024-07-30/09_DEPLOYMENT.git'
        TARGET_DIR = '04_DOCKER_COMPOSE_JENKINS'
        EC2_HOST = '0.0.0.0'  // EC2 인스턴스의 퍼블릭 IP나 DNS
        EC2_USER = 'ec2-user'       // EC2 사용자 이름 (Amazon Linux의 경우 'ec2-user', Ubuntu의 경우 'ubuntu')
    }
    
    stages {
        stage('Clone and Deploy on EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        chmod 600 \${SSH_KEY}
                        ssh -i \${SSH_KEY} -o StrictHostKeyChecking=no \${EC2_USER}@\${EC2_HOST} "
                            # 기존 디렉토리 정리
                            rm -rf 09_DEPLOYMENT && \\
                            
                            # GitHub 저장소 클론
                            git clone https://github.com/STD-INFO-COMPUTING-WEB-2024-07-30/09_DEPLOYMENT.git && \\
                            
                            # 작업 디렉토리로 이동
                            cd 09_DEPLOYMENT/04_DOCKER_COMPOSE_JENKINS && \\
                            
                            # Docker 명령어 실행 (sudo 사용)
                            sudo docker-compose down || true && \\
                            sudo docker rm -f \$(sudo docker ps -aq) 2>/dev/null || true && \\
                            sudo docker rmi -f \$(sudo docker images -q) 2>/dev/null || true && \\
                            
                            # 이미지 강제 재빌드 및 컨테이너 시작
                            sudo docker-compose build --no-cache && \\
                            sudo docker-compose up -d --scale jenkins=0
                        "
                    """
                }
            }
        }
    }  
    post {
        success {
            echo 'Deployment to EC2 completed successfully!'
        }
        failure {
            echo 'Deployment to EC2 failed!'
        }
    }

}     